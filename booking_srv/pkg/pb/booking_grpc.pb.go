// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: pkg/pb/booking.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	Booking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	GetBookingList(ctx context.Context, in *GetBookingListRequest, opts ...grpc.CallOption) (*GetBookingListResponse, error)
	GetTherapistFreeTime(ctx context.Context, in *TherapistGetFreeTimeRequest, opts ...grpc.CallOption) (*TherapistGetFreeTimeResponse, error)
	SetFreeTime(ctx context.Context, in *TherapistSetFreeTimeRequest, opts ...grpc.CallOption) (*TherapistSetFreeTimeResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) Booking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/Booking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingList(ctx context.Context, in *GetBookingListRequest, opts ...grpc.CallOption) (*GetBookingListResponse, error) {
	out := new(GetBookingListResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/GetBookingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetTherapistFreeTime(ctx context.Context, in *TherapistGetFreeTimeRequest, opts ...grpc.CallOption) (*TherapistGetFreeTimeResponse, error) {
	out := new(TherapistGetFreeTimeResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/GetTherapistFreeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) SetFreeTime(ctx context.Context, in *TherapistSetFreeTimeRequest, opts ...grpc.CallOption) (*TherapistSetFreeTimeResponse, error) {
	out := new(TherapistSetFreeTimeResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/SetFreeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	Booking(context.Context, *BookingRequest) (*BookingResponse, error)
	GetBookingList(context.Context, *GetBookingListRequest) (*GetBookingListResponse, error)
	GetTherapistFreeTime(context.Context, *TherapistGetFreeTimeRequest) (*TherapistGetFreeTimeResponse, error)
	SetFreeTime(context.Context, *TherapistSetFreeTimeRequest) (*TherapistSetFreeTimeResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) Booking(context.Context, *BookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Booking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingList(context.Context, *GetBookingListRequest) (*GetBookingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingList not implemented")
}
func (UnimplementedBookingServiceServer) GetTherapistFreeTime(context.Context, *TherapistGetFreeTimeRequest) (*TherapistGetFreeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTherapistFreeTime not implemented")
}
func (UnimplementedBookingServiceServer) SetFreeTime(context.Context, *TherapistSetFreeTimeRequest) (*TherapistSetFreeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFreeTime not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_Booking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).Booking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/Booking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).Booking(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/GetBookingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingList(ctx, req.(*GetBookingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetTherapistFreeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TherapistGetFreeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetTherapistFreeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/GetTherapistFreeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetTherapistFreeTime(ctx, req.(*TherapistGetFreeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_SetFreeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TherapistSetFreeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).SetFreeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/SetFreeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).SetFreeTime(ctx, req.(*TherapistSetFreeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Booking",
			Handler:    _BookingService_Booking_Handler,
		},
		{
			MethodName: "GetBookingList",
			Handler:    _BookingService_GetBookingList_Handler,
		},
		{
			MethodName: "GetTherapistFreeTime",
			Handler:    _BookingService_GetTherapistFreeTime_Handler,
		},
		{
			MethodName: "SetFreeTime",
			Handler:    _BookingService_SetFreeTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/booking.proto",
}
